{"version":3,"sources":["img/spinner.gif","img/our-gallery.png","components/Search.js","components/CharacterItem.js","components/Spinner.js","components/CharacterGrid.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","getQuery","useState","text","setText","className","type","placeholder","onChange","e","query","target","value","CharacterItem","item","src","largeImageURL","alt","comments","likes","downloads","Spinner","spinner","CharacterGrid","isLoading","items","map","key","id","Header","logo","App","API_KEY","setItems","setIsLoading","setQuery","useEffect","a","axios","get","res","console","log","data","hits","fetchData","fetchSportGallery","fetchFoodGallery","fetchMusicGallery","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2b0ff564.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.235b9b3e.gif\";","module.exports = __webpack_public_path__ + \"static/media/our-gallery.6c980c6d.png\";","import React, { useState } from \"react\";\r\n\r\nconst Search = ({ getQuery }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const onChange = (query) => {\r\n    setText(query);\r\n    getQuery(query);\r\n  };\r\n\r\n  return (\r\n    <section className=\"search\">\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search\"\r\n          onChange={(e) => onChange(e.target.value)}\r\n          value={text}\r\n        />\r\n      </form>\r\n      <div></div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react'\r\n\r\nfunction CharacterItem({item}) {\r\n   // console.log(item);\r\n    return (\r\n        <div className='card'>\r\n      <div className='card-inner'>\r\n        <div className='card-front'>\r\n          <img src={item.largeImageURL} alt='' />\r\n        </div>\r\n       <div className='card-back'>\r\n          <ul>\r\n          <li><strong>comments:</strong></li> {item.comments}\r\n          <li><strong>likes:</strong></li>{item.likes}\r\n          <li><strong>downloads:</strong></li>{item.downloads}\r\n          </ul>\r\n      </div>\r\n\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CharacterItem\r\n","import React from 'react'\r\nimport spinner from \"../img/spinner.gif\"\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div className=\"center\">\r\n            <img src={spinner} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React from 'react'\r\nimport CharacterItem from './CharacterItem'\r\nimport Spinner from './Spinner'\r\n\r\n\r\nfunction CharacterGrid({isLoading,items}) {\r\n    \r\n    return    isLoading ? (<Spinner/>) : (<section className=\"cards\">\r\n            {items.map(item=>(\r\n                <CharacterItem key={item.id} item ={item}></CharacterItem>\r\n            ))}\r\n        </section>)\r\n    \r\n       \r\n    \r\n}\r\n\r\nexport default CharacterGrid\r\n","import React from 'react'\r\nimport logo from \"../img/our-gallery.png\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"center\">\r\n        <img src={logo} alt=\"\"/> \r\n       \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Search from \"./components/Search\";\nimport CharacterGrid from \"./components/CharacterGrid\";\nimport Header from \"./components/Header\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const API_KEY = \"18531059-fadd493790965810e796ee1b9\";\n  const [items, setItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [query, setQuery] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await axios.get(\n        `https://pixabay.com/api/?key=${API_KEY}&q=${query}=photo`\n      );\n\n      //  console.log(res.data);\n      console.log(res.data.hits);\n      setItems(res.data.hits);\n\n      setIsLoading(false);\n    };\n    fetchData();\n  }, [query]);\n\n  const fetchSportGallery = async () => {\n    const res = await axios.get(\n      `https://pixabay.com/api/?key=${API_KEY}&q=sport=photo`\n    );\n    setItems(res.data.hits);\n  };\n  const fetchFoodGallery = async () => {\n    const res = await axios.get(\n      `https://pixabay.com/api/?key=${API_KEY}&q=food=photo`\n    );\n    setItems(res.data.hits);\n  };\n  const fetchMusicGallery = async () => {\n    const res = await axios.get(\n      `https://pixabay.com/api/?key=${API_KEY}&q=music=photo`\n    );\n    setItems(res.data.hits);\n  };\n\n  return (\n    <div className=\"App\">\n      <Search getQuery={(query) => setQuery(query)} />\n      <Header />\n      <button className=\"btn\" onClick={fetchSportGallery}>\n        Sport\n      </button>\n      <button className=\"btn\" onClick={fetchFoodGallery}>\n        Food\n      </button>\n      <button className=\"btn\" onClick={fetchMusicGallery}>\n        Music\n      </button>\n      <CharacterGrid isLoading={isLoading} items={items} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}