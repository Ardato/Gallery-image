{"version":3,"sources":["img/spinner.gif","img/our-gallery.png","context/GlobalState.js","components/Search.js","components/GalleryItem.js","components/Spinner.js","components/GalleryGrid.js","components/Header.js","components/FilterByCategory.js","components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GlobalState","createContext","GlobalStateProvider","props","API_KEY","useState","items","setItems","setIsLoading","query","setQuery","currentPage","setCurrentPage","itemsPerPage","useEffect","a","axios","get","res","data","hits","fetchData","fetchSportGallery","console","log","fetchFoodGallery","fetchMusicGallery","indexOfLastItem","indexOfFirstItem","currentItems","slice","totalItems","length","Provider","value","getQuery","paginate","pageNumber","children","Search","useContext","text","setText","className","type","placeholder","onChange","e","target","GalleryItem","item","src","largeImageURL","alt","comments","likes","downloads","Spinner","spinner","GalleryGrid","isLoading","map","key","id","Header","logo","FilterByCategory","onClick","Pagination","i","Math","ceil","push","number","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e5d82b91.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.235b9b3e.gif\";","module.exports = __webpack_public_path__ + \"static/media/our-gallery.6c980c6d.png\";","import React, { createContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nexport const GlobalState = createContext();\r\n\r\nconst GlobalStateProvider = (props) => {\r\n  const API_KEY = \"18531059-fadd493790965810e796ee1b9\";\r\n  const [items, setItems] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(9);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const res = await axios.get(\r\n        `https://pixabay.com/api/?key=${API_KEY}&q=${query}=photo`\r\n      );\r\n      //  console.log(res.data);\r\n      //console.log(res.data.hits);\r\n      setItems(res.data.hits);\r\n\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, [query]);\r\n\r\n  const fetchSportGallery = async () => {\r\n    const res = await axios.get(\r\n      `https://pixabay.com/api/?key=${API_KEY}&q=sport=photo`\r\n    );\r\n    setItems(res.data.hits);\r\n    console.log(res.data.hits);\r\n  };\r\n\r\n  const fetchFoodGallery = async () => {\r\n    const res = await axios.get(\r\n      `https://pixabay.com/api/?key=${API_KEY}&q=food=photo`\r\n    );\r\n    setItems(res.data.hits);\r\n  };\r\n\r\n  const fetchMusicGallery = async () => {\r\n    const res = await axios.get(\r\n      `https://pixabay.com/api/?key=${API_KEY}&q=music=photo`\r\n    );\r\n    setItems(res.data.hits);\r\n  };\r\n  const getQuery = (query) => {\r\n    setQuery(query);\r\n  };\r\n\r\n    \r\n  ///Get current items\r\n  const indexOfLastItem = currentPage*itemsPerPage\r\n  const indexOfFirstItem = indexOfLastItem-itemsPerPage\r\n  const currentItems = items.slice(indexOfFirstItem,indexOfLastItem)\r\n  ////Change page\r\n  const paginate = (pageNumber)=>setCurrentPage(pageNumber)\r\n  const totalItems = items.length\r\n  // console.log(totalItems);\r\n\r\n  return (\r\n    <GlobalState.Provider\r\n      value={{\r\n        items,\r\n        currentItems,\r\n        fetchSportGallery,\r\n        fetchFoodGallery,\r\n        fetchMusicGallery,\r\n        getQuery,\r\n        itemsPerPage,\r\n        paginate,\r\n        totalItems\r\n\r\n      }}\r\n    >\r\n      {props.children}\r\n    </GlobalState.Provider>\r\n  );\r\n};\r\n\r\nexport default GlobalStateProvider;\r\n","import React, { useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalState } from \"../context/GlobalState\";\r\n\r\nconst Search = () => {\r\n  const {getQuery} = useContext(GlobalState)\r\n  const [text, setText] = useState(\"\");\r\n  const onChange = (query) => {\r\n    setText(query);\r\n    getQuery(query);\r\n  };\r\n\r\n  return (\r\n    <section className=\"search\">\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search\"\r\n          onChange={(e) => onChange(e.target.value)}\r\n          value={text}\r\n        />\r\n      </form>\r\n      <div></div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nfunction GalleryItem({ item }) {\r\n  // console.log(item)\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-inner\">\r\n        <div className=\"card-front\">\r\n          <img src={item.largeImageURL} alt=\"\" />\r\n        </div>\r\n        <div className=\"card-back\">\r\n          <ul>\r\n            <li>\r\n              <strong>comments:</strong>\r\n            </li>{\" \"}\r\n            {item.comments}\r\n            <li>\r\n              <strong>likes:</strong>\r\n            </li>\r\n            {item.likes}\r\n            <li>\r\n              <strong>downloads:</strong>\r\n            </li>\r\n            {item.downloads}\r\n          </ul>\r\n        </div>\r\n          \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GalleryItem;\r\n","import React from 'react'\r\nimport spinner from \"../img/spinner.gif\"\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div className=\"center\">\r\n            <img src={spinner} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalState } from \"../context/GlobalState\";\r\nimport GalleryItem from \"./GalleryItem\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nfunction GalleryGrid() {\r\n  const { isLoading, currentItems } = useContext(GlobalState);\r\n  return isLoading ? (\r\n    <Spinner />\r\n  ) : (\r\n    <section className=\"cards\">\r\n      {currentItems.map((item) => (\r\n        <GalleryItem key={item.id} item={item}></GalleryItem>\r\n      ))}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default GalleryGrid;\r\n","import React from 'react'\r\nimport logo from \"../img/our-gallery.png\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n        <img src={logo} alt=\"\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalState } from \"../context/GlobalState\";\r\n\r\nconst FilterByCategory = () => {\r\n  const { fetchSportGallery, fetchFoodGallery, fetchMusicGallery } = useContext(\r\n    GlobalState\r\n  );\r\n  return (\r\n    <div>\r\n      <button className=\"btn\" onClick={fetchSportGallery}>\r\n        Sport\r\n      </button>\r\n      <button className=\"btn\" onClick={fetchFoodGallery}>\r\n        Food\r\n      </button>\r\n      <button className=\"btn\" onClick={fetchMusicGallery}>\r\n        Music\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterByCategory;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalState } from \"../context/GlobalState\";\r\n\r\nconst Pagination = () => {\r\n    const {itemsPerPage, totalItems, paginate} = useContext(GlobalState)\r\n  const pageNumber = [];\r\n  for (let i = 1; i <= Math.ceil(totalItems / itemsPerPage); i++) {\r\n    pageNumber.push(i);\r\n  }\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pageNumber.map((number) => (\r\n          <li key={number} className=\"page-item\">\r\n            <a onClick={() => paginate(number)} href=\"!#\" className=\"page-link\">\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\nimport Search from \"./components/Search\";\nimport GalleryGrid from \"./components/GalleryGrid\";\nimport Header from \"./components/Header\";\nimport FilterByCategory from \"./components/FilterByCategory\";\nimport \"./App.css\";\nimport GlobalStateProvider from \"./context/GlobalState\";\nimport Pagination from \"./components/Pagination\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStateProvider>\n        <Search />\n        <Header />\n        <FilterByCategory />\n        <GalleryGrid />\n        <Pagination/>\n      </GlobalStateProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}